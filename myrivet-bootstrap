#! /usr/bin/env bash

# Rivet bootstrapping / installation script for version 4.0.x

test -z "$USE_CVMFS" && USE_CVMFS="0"
test -z "$BUILD_PREFIX" && BUILD_PREFIX="$PWD/tools-build"
test -z "$INSTALL_PREFIX" && INSTALL_PREFIX="$PWD/rivet"
test -z "$PYTHON_EXE" && PYTHON_EXE="python3"
test -z "$USE_VENV" && USE_VENV="1"
test -z "$MAKE" && MAKE="make -j8"
test -z "$CMAKE" && CMAKE="cmake"

test -z "$INSTALL_HEPMC" && INSTALL_HEPMC="1"
test -z "$INSTALL_FASTJET" && INSTALL_FASTJET="1"
test -z "$INSTALL_FJCONTRIB" && INSTALL_FJCONTRIB="1"
test -z "$INSTALL_HDF5" && INSTALL_HDF5="1"
test -z "$INSTALL_HIGHFIVE" && INSTALL_HIGHFIVE="1"
test -z "$INSTALL_YODA" && INSTALL_YODA="0"
test -z "$INSTALL_RIVET" && INSTALL_RIVET="1"

test -z "$RIVET_VERSION" && RIVET_VERSION="4.0.0"
test -z "$YODA_VERSION" && YODA_VERSION="2.0.0"

test -z "$HEPMC_VERSION" && HEPMC_VERSION="3.2.6" # or 2.06.11
test -z "$FASTJET_VERSION" && FASTJET_VERSION="3.4.0"
test -z "$FJCONTRIB_VERSION" && FJCONTRIB_VERSION="1.051"
test -z "$HDF5_VERSION" && HDF5_VERSION="1.14.2"
test -z "$HIGHFIVE_VERSION" && HIGHFIVE_VERSION="2.7.1"
#test -z "$CYTHON_VERSION" && CYTHON_VERSION="0.29.32"

test -z "$INSTALL_CYTHON" && INSTALL_CYTHON="0"
test -z "$INSTALL_AUTOTOOLS" && INSTALL_AUTOTOOLS="0"

test -z "$INSTALL_RIVETDEV" && INSTALL_RIVETDEV="0"  #< mostly here just for documentation!
test -z "$INSTALL_YODADEV" && INSTALL_YODADEV="1"
test -z "$YODA_BRANCH" && YODA_BRANCH="25c2e3f3a5e4334"
test -z "$RIVET_BRANCH" && RIVET_BRANCH="release-4-0-x"

test -z "$CXXDIALECT" && CXXDIALECT="c++17"

## Paths for the case of existing installations
# TODO: shouldn't these be looking in /usr/local? ~Never system packages
test -z "$HEPMCPATH" && HEPMCPATH="/usr"
test -z "$FASTJETPATH" && FASTJETPATH="/usr"
test -z "$HDF5PATH" && HDF5PATH="/usr"
test -z "$HIGHFIVEPATH" && HIGHFIVEPATH="/usr"
test -z "$YODAPATH" && YODAPATH="/usr"

test -z "$RIVET_CONFFLAGS" && RIVET_CONFFLAGS="" #--enable-unvalidated
test -z "$YODA_CONFFLAGS" && YODA_CONFFLAGS=""


echo "----------------------------------------------------------------------------------------------------------------"
echo "IF CYTHON IS INSTALLED, BUT CAN NOT BE FOUND, TRY ADDING UP THE CYTHON PACKAGE FOLDER TO THE PYTHON PATH, e.g.:"
echo
echo
echo "   export PYTHONPATH="/home/lessa/.local/lib/python3.12/site-packages":$PYTHONPATH   "
echo
echo
echo "----------------------------------------------------------------------------------------------------------------" 
export PYTHONPATH="/home/lessa/.local/lib/python3.12/site-packages":$PYTHONPATH
###############

if [[ "$USE_CVMFS" -eq "1" ]]; then
  # On CentOS/AlmaLinux platforms, set up newer build tools first,
  # e.g. using one of the more recent LCG "views":
  source /cvmfs/sft.cern.ch/lcg/releases/LCG_105/Python/3.9.12/x86_64-el9-gcc13-opt/Python-env.sh
  source /cvmfs/sft.cern.ch/lcg/releases/LCG_105/CMake/3.26.2/x86_64-el9-gcc13-opt/CMake-env.sh
  source /cvmfs/sft.cern.ch/lcg/releases/LCG_105/ROOT/6.30.02/x86_64-el9-gcc13-opt/ROOT-env.sh
fi


## Adapt config for developer mode
if [[ "$INSTALL_YODADEV" -eq "1" ]]; then
    ## For rivetdev we skip the normal yoda/rivet installation
    INSTALL_YODA="0"
    YODA_VERSION="dev"

    ## Test that necessary build tools exist or are requested for installation
    if [[ -z "$(which git 2> /dev/null)" ]]; then
        echo "git not found: you need a git installation to install Rivet+YODA in dev mode"
        exit 2
    fi
    if [[ "$INSTALL_AUTOTOOLS" != "1" ]]; then
        if [[ -z "$(which autoconf 2> /dev/null)" || -z "$(which autoreconf 2> /dev/null)" || -z "$(which automake 2> /dev/null)" || -z "$(which libtoolize 2> /dev/null)" ]]; then
            echo "autotools (i.e. autoconf, automake, etc.) not found: you need these to install Rivet+YODA in dev mode. Maybe run with INSTALL_AUTOTOOLS=1?"
            exit 2
        fi
    fi
    if [[ "$INSTALL_CYTHON" != "1" ]]; then
        if [[ -z "$(which cython 2> /dev/null)" ]]; then
            echo "cython not found: you need a cython installation to install Rivet+YODA in dev mode. Maybe run with INSTALL_CYTHON=1?"
            exit 1
        fi
    fi
fi

## Adapt config for developer mode
if [[ "$INSTALL_RIVETDEV" -eq "1" ]]; then
    ## For rivetdev we skip the normal yoda/rivet installation
    INSTALL_YODA="0"
    INSTALL_RIVET="0"
    YODA_VERSION="dev"
    RIVET_VERSION="dev"

    ## Test that necessary build tools exist or are requested for installation
    if [[ -z "$(which git 2> /dev/null)" ]]; then
        echo "git not found: you need a git installation to install Rivet+YODA in dev mode"
        exit 2
    fi
    if [[ "$INSTALL_AUTOTOOLS" != "1" ]]; then
        if [[ -z "$(which autoconf 2> /dev/null)" || -z "$(which autoreconf 2> /dev/null)" || -z "$(which automake 2> /dev/null)" || -z "$(which libtoolize 2> /dev/null)" ]]; then
            echo "autotools (i.e. autoconf, automake, etc.) not found: you need these to install Rivet+YODA in dev mode. Maybe run with INSTALL_AUTOTOOLS=1?"
            exit 2
        fi
    fi
    if [[ "$INSTALL_CYTHON" != "1" ]]; then
        if [[ -z "$(which cython 2> /dev/null)" ]]; then
            echo "cython not found: you need a cython installation to install Rivet+YODA in dev mode. Maybe run with INSTALL_CYTHON=1?"
            exit 1
        fi
    fi
fi


echo "Running Rivet bootstrap script"
echo "Building Rivet $RIVET_VERSION, YODA $YODA_VERSION"
echo

## Immediate exit on a command (group) failure and optional debug mode
set -e
test -n "$DEBUG" && set -x
export PATH=$INSTALL_PREFIX/bin:$PATH

if [[ -n $(which wget 2> /dev/null) ]]; then
    function wget_untar { wget --no-check-certificate --no-verbose $1 -O- | tar --no-same-owner -xz; }
elif [[ -n $(which curl 2> /dev/null) ]]; then
    function wget_untar { curl --insecure --silent --show-error $1 | tar --no-same-owner -xz; }
fi
function conf { ./configure --prefix=$INSTALL_PREFIX "$@"; }
function mmi { $MAKE "$@" && $MAKE install; }


## Make & activate installation directory as a Python venv, set up for bash completion scripts and multi-arch libs
if [[ "$USE_VENV" == 1 ]]; then
    python -m venv $INSTALL_PREFIX
    source $INSTALL_PREFIX/bin/activate
fi
mkdir -p $INSTALL_PREFIX/etc/bash_completion.d
mkdir -p $INSTALL_PREFIX/lib
if [[ ! -e $INSTALL_PREFIX/lib64 ]]; then ln -s lib $INSTALL_PREFIX/lib64; fi


## Rivet needs C++14: first run a simple test for that
test -n "$CXX" || CXX="g++"
CXXVERSION=$($CXX -dumpfullversion -dumpversion 2> /dev/null)
test -n "$CXXVERSION" && CXXVERSION=" $CXXVERSION" #< get spacing right in printout below
echo "int main() { return 0; }" > cxxtest.cc
GOODCXX=1
$CXX -std=$CXXDIALECT cxxtest.cc -o cxxtest &> /dev/null || GOODCXX=0
rm -f cxxtest cxxtest.cc
if [[ "$GOODCXX" -ne 1 ]]; then
    echo "$CXX$CXXVERSION does not accept the -std=$CXXDIALECT flag. You need C++ to build Rivet: exiting installation :-("
    exit 1
else
    echo "$CXX$CXXVERSION accepts the -std=$CXXDIALECT flag: hurrah! Continuing installation..."
    echo
fi
## Disable asserts for production running
export CPPFLAGS="$CPPFLAGS -DNDEBUG"


## Install HepMC
# TODO: remove the HepMC2 option soon... from 3.2.0 onward
if [[ ${HEPMC_VERSION::1} = 2 ]]; then
  HEPMC3=0
  HEPMCNAME=hepmc
else
  HEPMC3=1
  HEPMCNAME=hepmc3
fi
if [[ "$INSTALL_HEPMC" = 1 ]]; then
    echo "INSTALLING HEPMC $HEPMC_VERSION"
    cd $BUILD_PREFIX
    if [[ $HEPMC3 = 1 ]]; then
        test -d HepMC3-$HEPMC_VERSION || wget_untar http://hepmc.web.cern.ch/hepmc/releases/HepMC3-$HEPMC_VERSION.tar.gz
        mkdir -p HepMC3-$HEPMC_VERSION-build && cd HepMC3-$HEPMC_VERSION-build
        test -n "$HEPMC_CMAKE_ADD" || HEPMC_CMAKE_ADD="-DHEPMC3_ENABLE_PYTHON=OFF"
        $CMAKE ../HepMC3-$HEPMC_VERSION/ -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -DHEPMC3_ENABLE_ROOTIO=OFF $HEPMC_CMAKE_ADD
    else
        test -d HepMC-$HEPMC_VERSION || wget_untar http://hepmc.web.cern.ch/hepmc/releases/hepmc$HEPMC_VERSION.tgz
        mkdir -p HepMC-$HEPMC_VERSION-build && cd HepMC-$HEPMC_VERSION-build
        $CMAKE ../HepMC-$HEPMC_VERSION/ -DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX -Dmomentum=GEV -Dlength=MM
    fi
    mmi
    HEPMCPATH=$INSTALL_PREFIX
    echo
fi

## Install FastJet
if [[ "$INSTALL_FASTJET" = 1 ]]; then
    echo "INSTALLING FASTJET $FASTJET_VERSION"
    cd $BUILD_PREFIX
    #test -d fastjet-$FASTJET_VERSION || wget_untar http://www.fastjet.fr/repo/fastjet-$FASTJET_VERSION.tar.gz
    test -d fastjet-$FASTJET_VERSION || wget_untar http://cedar-tools.web.cern.ch/downloads/fastjet-$FASTJET_VERSION.tar.gz
    cd fastjet-$FASTJET_VERSION
    conf --enable-shared --disable-auto-ptr --enable-allcxxplugins
    mmi
    FASTJETPATH=$INSTALL_PREFIX
    echo
fi

## Install fjcontrib
if [[ "$INSTALL_FJCONTRIB" = 1 ]]; then
    echo "INSTALLING FASTJET CONTRIB $FJCONTRIB_VERSION"
    cd $BUILD_PREFIX
    #test -d fastjet-$FJCONTRIB_VERSION || wget_untar http://fastjet.hepforge.org/contrib/downloads/fjcontrib-$FJCONTRIB_VERSION.tar.gz
    test -d fastjet-$FJCONTRIB_VERSION || wget_untar http://cedar-tools.web.cern.ch/downloads/fjcontrib-$FJCONTRIB_VERSION.tar.gz
    cd fjcontrib-$FJCONTRIB_VERSION
    ./configure --fastjet-config=$FASTJETPATH/bin/fastjet-config CXXFLAGS=-fPIC # fastjet-config already contains INSTALL_PREFIX
    mmi -j1 fragile-shared-install
    # does not need FJCONTRIBPATH because the relevant includes/libraries are merged with regular FastJet structure
    echo
fi

## Install HDF5
if [[ "$INSTALL_HDF5" = 1 ]]; then
  echo "INSTALLING HDF5 $HDF5_VERSION"
  cd $BUILD_PREFIX
    test -d hdf5-$HDF5_VERSION || wget_untar https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION::-2}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz
    cd hdf5-$HDF5_VERSION
    conf
    mmi
    HDF5PATH=$INSTALL_PREFIX
fi

## Install HighFive
if [[ "$INSTALL_HIGHFIVE" = 1 ]]; then
  echo "INSTALLING HIGHFIVE $HIGHFIVE_VERSION"
  cd $BUILD_PREFIX
    test -d HighFive-$HIGHFIVE_VERSION || wget_untar https://github.com/BlueBrain/HighFive/archive/refs/tags/v${HIGHFIVE_VERSION}.tar.gz
    mkdir -p HighFive-$HIGHFIVE_VERSION/build
    cd HighFive-$HIGHFIVE_VERSION/build
    ${CMAKE} ../ -DHIGHFIVE_EXAMPLES=OFF -DHIGHFIVE_USE_BOOST=OFF -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} -DHIGHFIVE_UNIT_TESTS=OFF -B .
    ${CMAKE} --build ./
    ${CMAKE} --install ./
    HIGHFIVEPATH=$INSTALL_PREFIX
fi

## Install Cython
if [[ "$INSTALL_CYTHON" = 1 ]]; then
    #echo "INSTALLING CYTHON $CYTHON_VERSION"
    #cd $BUILD_PREFIX
    #test -d cython-$CYTHON_VERSION || { wget_untar https://github.com/cython/cython/archive/$CYTHON_VERSION.tar.gz ; }
    #export PATH=$BUILD_PREFIX/cython-$CYTHON_VERSION/bin:$PATH
    #export PYTHONPATH=$BUILD_PREFIX/cython-$CYTHON_VERSION:$PYTHONPATH
    echo "INSTALLING LATEST CYTHON"
    pip install Cython
    echo
fi

## Install autotools
if [[ "$INSTALL_AUTOTOOLS" = "1" ]]; then
    cd $BUILD_PREFIX
    function _build_autotool() {
        name=$1-$2
        if [ ! -e $name ]; then wget_untar http://ftpmirror.gnu.org/$1/$name.tar.gz; fi
        cd $name
        ./configure --prefix=$INSTALL_PREFIX
        mmi
        cd ..
    }
    test -e $INSTALL_PREFIX/bin/m4       || { echo; echo "Building m4"; _build_autotool m4 1.4.19; }
    test -e $INSTALL_PREFIX/bin/autoconf || { echo; echo "Building autoconf"; _build_autotool autoconf 2.71; }
    test -e $INSTALL_PREFIX/bin/automake || { echo; echo "Building automake"; _build_autotool automake 1.16.5; }
    test -e $INSTALL_PREFIX/bin/libtool  || { echo; echo "Building libtool"; _build_autotool libtool 2.4.7; }
    echo
fi


## Install YODA from tarball (dev mode is below)
if [[ "$INSTALL_YODA" = 1 ]]; then
    echo "INSTALLING YODA $YODA_VERSION"
    cd $BUILD_PREFIX
    test -d YODA-$YODA_VERSION || wget_untar http://cedar-tools.web.cern.ch/downloads/YODA-$YODA_VERSION.tar.gz
    cd YODA-$YODA_VERSION
    conf $YODA_CONFFLAGS
    mmi
    cp yodaenv.sh $INSTALL_PREFIX/yodaenv.sh
    YODAPATH=$INSTALL_PREFIX
    echo
fi


## Following block for dev mode only -- non-developers should ignore
if [[ "$INSTALL_YODADEV" = 1 ]]; then
    ## Install dev YODA
    cd $BUILD_PREFIX
    echo "INSTALLING YODA $YODA_VERSION"
    test -d yoda || git clone https://gitlab.com/hepcedar/yoda.git yoda
    cd yoda
    git checkout $YODA_BRANCH
    autoreconf -i
    conf $YODA_CONFFLAGS
    mmi
    cp yodaenv.sh $INSTALL_PREFIX/yodaenv.sh
    YODAPATH=$INSTALL_PREFIX
    echo
fi

## Install Rivet from tarball (dev mode is below)
if [[ "$INSTALL_RIVET" = 1 ]]; then
    echo "INSTALLING RIVET $RIVET_VERSION"
    cd $BUILD_PREFIX
    test -d Rivet-$RIVET_VERSION || wget_untar http://cedar-tools.web.cern.ch/downloads/Rivet-$RIVET_VERSION.tar.gz
    cd Rivet-$RIVET_VERSION
    conf $RIVET_CONFFLAGS \
        --with-yoda=$YODAPATH \
        --with-$HEPMCNAME=$HEPMCPATH \
        --with-fastjet=$FASTJETPATH
    mmi
    cp rivetenv.sh rivetenv.csh $INSTALL_PREFIX/
    echo
fi


## Following block for dev mode only -- non-developers should ignore
if [[ "$INSTALL_RIVETDEV" = 1 ]]; then

    ## Install dev Rivet
    cd $BUILD_PREFIX
    echo "INSTALLING RIVET $RIVET_VERSION"
    test -d rivet || git clone https://gitlab.com/hepcedar/rivet.git rivet
    cd rivet
    git checkout $RIVET_BRANCH
    git pull
    autoreconf -i
    conf $RIVET_CONFFLAGS \
        --with-yoda=$YODAPATH \
        --with-$HEPMCNAME=$HEPMCPATH \
        --with-fastjet=$FASTJETPATH
    mmi
    cp rivetenv.sh $INSTALL_PREFIX/
    echo
fi

cd $BUILD_PREFIX


## Install Python runtime deps, iff in venv mode
if [[ "$USE_VENV" == 1 ]]; then
    #$PYTHON_EXE -m venv $INSTALL_PREFIX
    source $INSTALL_PREFIX/bin/activate
    pip install pyyaml
    pip install requests
    pip install matplotlib
    pip install tqdm
    #pip install pydetex
fi


## Make/modify Rivet/venv setup scripts
if [[ "$USE_VENV" == 1 ]]; then
    echo '' >> $INSTALL_PREFIX/bin/activate
    echo 'source $VIRTUAL_ENV/yodaenv.sh' >> $INSTALL_PREFIX/bin/activate
    echo 'source $VIRTUAL_ENV/rivetenv.sh' >> $INSTALL_PREFIX/bin/activate
    TMPFILE=tmp$$
    echo "test -n \"\$VIRTUAL_ENV\" || source $INSTALL_PREFIX/bin/activate" | \
        cat - $INSTALL_PREFIX/rivetenv.sh > $TMPFILE && \
        mv $TMPFILE $INSTALL_PREFIX/rivetenv.sh
fi


## Announce the build success (now for sh only)
echo "All done. Now set some variables in your shell with"
if [[ "$USE_VENV" == 1 ]]; then
    echo "  source $INSTALL_PREFIX/bin/activate"
    echo "  or"
fi
echo "  source $INSTALL_PREFIX/rivetenv.sh"
